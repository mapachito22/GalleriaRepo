@page "/galloDetails"
@page "/galloDetails/{id:int}"
@inject GalloService galloService
@inject NavigationManager NavigationManager
@using BlazorInputFile


<h2>Gallo Detalles</h2>
<EditForm Model="@entity">

    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="Alias" class="control-label">Alias:</label>
                <input for="Alias" class="form-control" @bind="entity.Alias" />
            </div>
            <div class="form-group">
                <label for="Matricula" class="control-label">Matrícula:</label>
                <input for="Matricula" class="form-control" @bind="entity.Matricula" />
            </div>
            <div class="form-group">
                <label for="FechaNacimiento" class="control-label">Fecha Nacimiento:</label>
                <input for="FechaNacimiento" type="date" class="form-control" @bind="entity.FechaNacimiento" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input class="btn btn-success" type="submit" value="Save" @onclick="@SaveGallo" />
                <input class="btn btn-danger" type="button" value="Cancel" @onclick="@Cancel" />
            </div>
        </div>
    </div>

    <br />
    <br />

    <h1 class="DragAndDrop">Arrastra y suelta la imagen</h1>

    <p class="DragAndDrop">Puede arrastrar varias imagenes a la vez</p>

    <div class="DragAndDrop drag-drop-zone">
        <InputFile OnChange="ViewFile" />
        @status
    </div>

    @if (fileName != null)
    {
        <h3 class="DragAndDrop">@fileName</h3>
        <pre class="DragAndDrop">@fileTextContents</pre>
    }

</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    private Gallo entity = new Gallo();

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    const string DefaultStatus = "Suelta un archivo de texto aquí para verlo o haz clic para elegir un archivo";
    const int MaxFileSize = 5 * 1024 * 1024; // 5MB
    string status = DefaultStatus;

    string fileName;
    string fileTextContents;

    protected async Task SaveGallo()
    {
        if (await galloService.Save(entity))
            NavigationManager.NavigateTo("GallosList");
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("GallosList");
    }

    protected override async Task OnInitializedAsync()
    {

        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            var returnUrl =
                NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={"~/" + returnUrl}");
        }

        if (id > 0)
            entity = await galloService.Get(id);
    }

    async Task ViewFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = $"That's too big. Max size: {MaxFileSize} bytes.";
        }
        else
        {
            status = "Loading...";

            using (var reader = new StreamReader(file.Data))
            {
                fileTextContents = await reader.ReadToEndAsync();
                fileName = file.Name;
            }

            status = DefaultStatus;
        }
    }

}
