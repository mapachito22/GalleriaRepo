@page "/galloDetails"
@page "/galloDetails/{id:int}"
@inject GalloService galloService
@inject FamiliaService familiaService
@inject TipoGalloService tipoGalloService
@inject ImagenService imagenService
@inject NavigationManager NavigationManager
@inject IModalService modal
@using BlazorInputFile


<h2>Gallo Detalles</h2>
<EditForm Model="@this.entity">
    <div class="row">
        <div class="col-md-8">

            <div class="form-group">
                <label for="Matricula" class="control-label">Matrícula:</label>
                <input for="Matricula" class="form-control" required @bind="entity.Matricula" />
            </div>

            <div class="form-group">
                <label for="Alias" class="control-label">Alias:</label>
                <input for="Alias" class="form-control" @bind="entity.Alias" />
            </div>
            <div class="form-group">
                <label for="Id_TipoGallo" class="control-label">Tipo:</label>
                <select class="form-control" @bind="entity.Id_TipoGallo">
                    @if (tipoGallos?.Count > 0)
                    {
                        @foreach (var cnt in tipoGallos)
                        {
                            <option value="@cnt.Id">@cnt.Descripcion</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="FechaNacimiento" class="control-label">Fecha Nacimiento:</label>
                <input for="FechaNacimiento" type="date" required class="form-control" @bind="entity.FechaNacimiento" />
            </div>
            <div class="form-group">
                <label class="control-label">Padre:</label>
                <Blazored.Typeahead.BlazoredTypeahead SearchMethod="SearchPadre" @bind-Value="padre">
                    <SelectedTemplate Context="padre">@padre.Matricula - @padre.Alias</SelectedTemplate>
                    <ResultTemplate Context="padre">@padre.Matricula - @padre.Alias</ResultTemplate>
                </Blazored.Typeahead.BlazoredTypeahead>

                @if (padre != null)
                {

                    <a @onclick="@(e => goToGallo(entity.Id,padre.Id))" class="toRight">
                        <span class="i-info-circled" style="font-size: 25px; color: firebrick;" />
                    </a>
                }


            </div>
            <div class="form-group">
                <label class="control-label">Madre:</label>
                <Blazored.Typeahead.BlazoredTypeahead SearchMethod="SearchMadre" @bind-Value="madre">
                    <SelectedTemplate Context="madre">
                        @madre.Matricula - @madre.Alias
                    </SelectedTemplate>
                    <ResultTemplate Context="madre">@madre.Matricula - @madre.Alias </ResultTemplate>
                </Blazored.Typeahead.BlazoredTypeahead>

                @if (madre != null)
                {

                    <a @onclick="@(e => goToGallo(entity.Id,madre.Id))">
                        <span class="i-info-circled" style="font-size: 25px; color: firebrick;" />
                    </a>
                }



            </div>
            <div class="form-group">
                <label for="Notas" class="control-label">Notas:</label>
                <textarea rows="5" for="Notas" type="text" class="form-control" @bind="entity.Notas" />
            </div>
        </div>
    </div>

    <br />

    <div>
        <div>
            <h1 class="DragAndDrop">Arrastra y suelta la imagen</h1>
            <p class="DragAndDrop">Puede arrastrar varias imagenes a la vez</p>
            <div>
                <input class="btn btn-success" type="submit" value="Borrar" @onclick="borrasImagenes" />
                @if (!string.IsNullOrEmpty(msgError))
                {
                    <div class="alert alert-danger" role="alert">
                        @msgError
                    </div>
                }

            </div>
        </div>
        <div class="DragAndDrop drag-drop-zone">
            @if (ImagenesUrls.Count <= 0)
            {
                <InputFile multiple accept="image/png,image/gif,image/jpeg" OnChange="ViewFile" />
                @status
            }
            else
            {
                <div class="image-list">
                    <table class="table table-bordered col-md-3">
                        <tr>
                            @foreach (var item in ImagenesUrls)
                            {
                                <td>
                                    <div class="row">
                                        <div class="col-lg-12">
                                            <img src="data:{@item.file.Type};base64,@item.data" class="img-fluid" />
                                        </div>
                                    </div>

                                </td>
                            }
                        </tr>
                    </table>
                </div>

            }
        </div>
        @if (ImagenesUrls != null && ImagenesUrls.Count > 0)
        {
            <div class="col-12">
                <ul>
                    @foreach (var file in ImagenesUrls)
                    {
                        <li>
                            @file.nombre
                            <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                    @onclick="@(e => RemoveFile(file))">
                                <small class="align-text-bottom">Remove</small>
                            </button>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input class="btn btn-success" type="submit" value="Save" @onclick="@SaveGallo" />
                <input class="btn btn-danger" type="button" value="Cancel" @onclick="@Cancel" />
            </div>
        </div>
    </div>
</EditForm>

@code
{
    #region Propiedades
    [Parameter]
    public int id { get; set; }
    private Gallo entity = new Gallo();
    private Gallo madre;
    private Gallo padre;
    private List<Gallo> gallos = new List<Gallo>();
    private List<TipoGallo> tipoGallos = new List<TipoGallo>();
    List<string> acceptedFileTypes = new List<string>() { "image/png", "image/jpg", "image/jpeg", "image/gif" };
    private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();
    private string msgError;
    List<Imagen> ImagenesUrls = new List<Imagen>();
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    const string DefaultStatus = "Suelta un archivo de texto aquí para verlo o haz clic para elegir un archivo";
    const int MaxFileSize = 5 * 1024 * 1024; // 5MB
    string status = DefaultStatus;
    string fileName;
    string fileTextContents;
    [CascadingParameter] public IModalService Modal { get; set; }


    #endregion

    #region Metodos


    void ShowMadre(int Id)
    {
        //var parameters = new ModalParameters();
        //parameters.Add("Id", Id);
        //Modal.Show("Edit Movie", typeof(GallosModal), parameters);


        var parameters = new ModalParameters();
        parameters.Add(nameof(entity.Id), Id);

        Modal.Show<GallosModal>("Gallo", parameters);
    }

    private void goToGallo(int Id, int IdParent)
    {
        NavigationManager.NavigateTo("GallosModal/" + Id + "/" + IdParent);
    }

    protected async Task SaveGallo()
    {
        if (!string.IsNullOrEmpty(entity.Matricula))
        {

            if (await galloService.Save(entity, padre, madre))
            {
                await imagenService.UploadAsync(ImagenesUrls, entity.Id);
                NavigationManager.NavigateTo("GallosList");
            }
        }
    }

    private async Task<IEnumerable<Gallo>> SearchPadre(string searchText)
    {
        return await galloService.AllPadres(searchText);
    }

    private async Task<IEnumerable<Gallo>> SearchMadre(string search)
    {
        return await galloService.AllMadres(search);
    }

    protected void borrasImagenes()
    {
        ImagenesUrls.Clear();
        status = DefaultStatus;
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("GallosList");
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            var returnUrl =
                NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={"~/" + returnUrl}");
        }

        if (id > 0)
        {
            entity = await galloService.Get(id);
            Familia fMadre = await familiaService.Get(entity.Id, 2);
            Familia fPadre = await familiaService.Get(entity.Id, 1);

            if (fMadre != null && fMadre.Id_Gallo != null)
            {
                madre = await galloService.Get(fMadre.Id_Gallo ?? 0);
            }

            if (fPadre != null && fMadre.Id_Gallo != null)
            {
                padre = await galloService.Get(fPadre.Id_Gallo ?? 0);
            }

        }

        tipoGallos = await tipoGalloService.All();

    }

    private void RemoveFile(Imagen file)
    {
        ImagenesUrls.Remove(file);
    }

    async Task ViewFile(IFileListEntry[] files)
    {
        if (files.Count() <= 0)
        {
            return;
        }
        else
        {
            status = "Loading...";
            int conteo = 0;

            foreach (var file in files)
            {
                if (conteo == 3)
                {
                    conteo = 0;
                    return;
                }
                if (acceptedFileTypes.Contains(file.Type))
                {
                    Imagen myImagen = new Imagen();
                    myImagen.nombre = file.Name;
                    myImagen.Id_Gallo = entity.Id;
                    myImagen.file = file;
                    msgError = null;
                    conteo++;

                    if (file.Size > MaxFileSize)
                    {
                        status = $"That's too big. Max size: {MaxFileSize} bytes.";
                    }

                    using (MemoryStream ms = new MemoryStream())
                    {
                        await file.Data.CopyToAsync(ms);
                        var a = ms.ToArray();
                        var imageDataUrl = $"data:{file.Type};base64,{Convert.ToBase64String(a)}";
                        myImagen.data = Convert.ToBase64String(a);

                    }
                    ImagenesUrls.Add(myImagen);
                }
                else
                {
                    msgError = "Formato de Imagen no valido";
                }
            }
            status = DefaultStatus;
        }
    }
    #endregion
}
