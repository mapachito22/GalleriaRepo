@page "/prefijoDetails"
@page "/prefijoDetails/{id:int}"
@inject PrefijoService prefijoService
@inject NavigationManager NavigationManager

<h2 style="color: #c41c1c; padding-inline-start: 15px;">Prefijo Detalles</h2>
<EditForm Model="@entity">

        <div class="col-md-12">
            <div class="form-group">
                <label for="Descripcion" class="control-label">Descripcion:</label>
                <input for="Descripcion" class="form-control" @bind="entity.Descripcion" />
            </div>

            <div class="col text-center">
                <input class="btn btn-danger"  style="background-color: darkgray; border-color: darkgray; color: white;" type="submit" value="Cancelar" @onclick="@Cancel" />
                <input class="btn btn-success" style="background-color: #da1f1f; border-color: #da1f1f; color: white;" type="submit" value="Guardar" @onclick="@SavePrefijo" />

            </div>
        </div>

</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    private Prefijo entity = new Prefijo();

    protected async Task SavePrefijo()
    {
        if (await prefijoService.Save(entity))
            NavigationManager.NavigateTo("PrefijoList");
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("PrefijoList");
    }

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            var returnUrl =
                NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={"~/" + returnUrl}");
        }

        if (id > 0)
            entity = await prefijoService.Get(id);
    }
}

