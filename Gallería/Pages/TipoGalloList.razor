@page "/tipogalloList"
@inject TipoGalloService tipogalloService
@inject NavigationManager NavigationManager
@implements IDisposable
@inject IJSRuntime JSRuntime
@this.message

<div class="row">
    <h2>Tipo Gallo</h2>

    <a @onclick="NavigateTo">
        <span class="i-plus" style="font-size: 25px;color: green; padding: 10px;" />
    </a>
</div>

<div class="row">
    <table id="tabTipoGallo" class="table table-hover" style="width:110%">
        <thead>
            <tr>
                <th>Id</th>
                <th>Descripcion</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tg in tipoGallos)
            {
            <tr>
                <td>@tg.Id</td>
                <td>@tg.Descripcion</td>
                <td>
                    <a href="/TipoGalloDetails/@tg.Id">
                        <span class="i-pencil" style="font-size: 25px; color: skyblue;" />
                    </a>
                </td>
                <td>
                    <a href="/TipoGalloDelete/@tg.Id">
                        <span class="i-trash" style="font-size: 25px; color: firebrick;" />
                    </a>
                </td>
            </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    private List<TipoGallo> tipoGallos = new List<TipoGallo>();
    private string message;
    bool primera = false;
    bool primera_ = false;

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            var returnUrl =
                NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={"~/" + returnUrl}");
        }
        try
        {
            tipoGallos = await tipogalloService.All();
            await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#tabTipoGallo");

            await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#tabTipoGallo");

            if (!primera_)
            {
                await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#tabTipoGallo");
                primera_ = true;
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    private void NavigateTo()
    {
        NavigationManager.NavigateTo("TipoGalloDetails");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#tabTipoGallo");

        if (!primera)
        {
            await JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#tabTipoGallo");
            primera = true;
        }
    }

    void IDisposable.Dispose()
    {
        JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#tabTipoGallo");
    }
}